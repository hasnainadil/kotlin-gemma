<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/google/ai/edge/gallery/ui/cattleadvisor/CattleAdvisorScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/google/ai/edge/gallery/ui/cattleadvisor/CattleAdvisorScreen.kt" />
              <option name="originalContent" value="/*&#10; * Copyright 2025 Google LLC&#10; *&#10; * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#10; * you may not use this file except in compliance with the License.&#10; * You may obtain a copy of the License at&#10; *&#10; *     http://www.apache.org/licenses/LICENSE-2.0&#10; *&#10; * Unless required by applicable law or agreed to in writing, software&#10; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10; * See the License for the specific language governing permissions and&#10; * limitations under the License.&#10; */&#10;&#10;package com.google.ai.edge.gallery.ui.cattleadvisor&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.foundation.horizontalScroll&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Analytics&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Fullscreen&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.google.ai.edge.gallery.GalleryTopAppBar&#10;import com.google.ai.edge.gallery.data.AppBarAction&#10;import com.google.ai.edge.gallery.data.AppBarActionType&#10;import com.google.ai.edge.gallery.ui.modelmanager.ModelManagerViewModel&#10;import com.google.ai.edge.gallery.ui.common.ConfigDialog&#10;import com.google.ai.edge.gallery.ui.common.MarkdownText&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CattleAdvisorScreen(&#10;    viewModel: CattleAdvisorViewModel,&#10;    modelManagerViewModel: ModelManagerViewModel,&#10;    navigateUp: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val context = LocalContext.current&#10;    val analysisResults = viewModel.analysisResults&#10;    val isAnalyzing = viewModel.isAnalyzing&#10;    val errorMessage = viewModel.errorMessage&#10;    val isNutritionServiceInitialized = viewModel.isNutritionServiceInitialized&#10;    &#10;    // Initialize nutrition service on first composition&#10;    LaunchedEffect(Unit) {&#10;        viewModel.initializeNutritionService(context)&#10;    }&#10;    &#10;    val listState = rememberLazyListState()&#10;    val coroutineScope = rememberCoroutineScope()&#10;    &#10;    // Input states&#10;    var selectedCattleType by remember { mutableStateOf(&quot;&quot;) }&#10;    var targetWeight by remember { mutableStateOf(&quot;&quot;) }&#10;    var bodyWeight by remember { mutableStateOf(&quot;&quot;) }&#10;    var averageDailyGain by remember { mutableStateOf(&quot;&quot;) }&#10;    var expanded by remember { mutableStateOf(false) }&#10;    &#10;    // Cattle types from Python code&#10;    val cattleTypes = listOf(&#10;        &quot;Growing Steer/Heifer&quot;,&#10;        &quot;Growing Yearlings&quot;, &#10;        &quot;Growing Mature Bulls&quot;&#10;    )&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            GalleryTopAppBar(&#10;                title = &quot;Cattle Advisor&quot;,&#10;                leftAction = AppBarAction(&#10;                    actionType = AppBarActionType.NAVIGATE_UP,&#10;                    actionFn = navigateUp&#10;                )&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            // Show input form only when no analysis results&#10;            if (analysisResults.isEmpty()) {&#10;                // Input form&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;                ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Cattle Information&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    &#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    &#10;                    // Cattle Type Dropdown&#10;                    ExposedDropdownMenuBox(&#10;                        expanded = expanded,&#10;                        onExpandedChange = { expanded = !expanded }&#10;                    ) {&#10;                        OutlinedTextField(&#10;                            modifier = Modifier&#10;                                .menuAnchor(MenuAnchorType.PrimaryNotEditable)&#10;                                .fillMaxWidth(),&#10;                            readOnly = true,&#10;                            value = selectedCattleType,&#10;                            onValueChange = {},&#10;                            label = { Text(&quot;Cattle Type&quot;) },&#10;                            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },&#10;                            colors = ExposedDropdownMenuDefaults.outlinedTextFieldColors(),&#10;                        )&#10;                        ExposedDropdownMenu(&#10;                            expanded = expanded,&#10;                            onDismissRequest = { expanded = false },&#10;                        ) {&#10;                            cattleTypes.forEach { type -&gt;&#10;                                DropdownMenuItem(&#10;                                    text = { Text(type) },&#10;                                    onClick = {&#10;                                        selectedCattleType = type&#10;                                        expanded = false&#10;                                    },&#10;                                    contentPadding = ExposedDropdownMenuDefaults.ItemContentPadding,&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                    &#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                    &#10;                    // Target Weight&#10;                    OutlinedTextField(&#10;                        value = targetWeight,&#10;                        onValueChange = { targetWeight = it },&#10;                        label = { Text(&quot;Target Weight (lbs)&quot;) },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal),&#10;                        singleLine = true&#10;                    )&#10;                    &#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                    &#10;                    // Current Body Weight&#10;                    OutlinedTextField(&#10;                        value = bodyWeight,&#10;                        onValueChange = { bodyWeight = it },&#10;                        label = { Text(&quot;Current Body Weight (lbs)&quot;) },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal),&#10;                        singleLine = true&#10;                    )&#10;                    &#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                    &#10;                    // Average Daily Gain&#10;                    OutlinedTextField(&#10;                        value = averageDailyGain,&#10;                        onValueChange = { averageDailyGain = it },&#10;                        label = { Text(&quot;Average Daily Gain (lbs/day)&quot;) },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal),&#10;                        singleLine = true&#10;                    )&#10;                    &#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    &#10;                    // Analyze button - no model selection needed&#10;                    Button(&#10;                        onClick = {&#10;                            viewModel.clearError()&#10;                            val targetWeightValue = targetWeight.toDoubleOrNull() ?: 0.0&#10;                            val bodyWeightValue = bodyWeight.toDoubleOrNull() ?: 0.0&#10;                            val adgValue = averageDailyGain.toDoubleOrNull() ?: 0.0&#10;                            &#10;                            // Direct analysis without model selection&#10;                            viewModel.analyzeNutrition(&#10;                                context = context,&#10;                                cattleType = selectedCattleType,&#10;                                targetWeight = targetWeightValue,&#10;                                bodyWeight = bodyWeightValue,&#10;                                averageDailyGain = adgValue,&#10;                                modelManagerViewModel = modelManagerViewModel&#10;                            )&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        enabled = !isAnalyzing &amp;&amp; isNutritionServiceInitialized&#10;                    ) {&#10;                        if (isAnalyzing) {&#10;                            CircularProgressIndicator(&#10;                                modifier = Modifier.size(16.dp),&#10;                                strokeWidth = 2.dp&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&quot;Analyzing...&quot;)&#10;                        } else {&#10;                            Icon(&#10;                                Icons.Default.Analytics,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(18.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&quot;Analyze Nutrition&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            }&#10;            &#10;            // Error message&#10;            errorMessage?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)&#10;                ) {&#10;                    Text(&#10;                        text = error,&#10;                        modifier = Modifier.padding(12.dp),&#10;                        color = MaterialTheme.colorScheme.onErrorContainer&#10;                    )&#10;                }&#10;            }&#10;            &#10;            // Show results in full screen when available&#10;            if (analysisResults.isNotEmpty()) {&#10;                // New Analysis button when results exist&#10;                Button(&#10;                    onClick = {&#10;                        viewModel.clearResults() // Add this method to clear results and show form again&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.Analytics,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(18.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;New Analysis&quot;)&#10;                }&#10;                &#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                &#10;                // Show latest result in full screen mode&#10;                analysisResults.lastOrNull()?.let { latestResult -&gt;&#10;                    FullScreenAnalysisCard(result = latestResult)&#10;                }&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Auto-scroll to latest result&#10;    LaunchedEffect(analysisResults.size) {&#10;        if (analysisResults.isNotEmpty()) {&#10;            coroutineScope.launch {&#10;                listState.animateScrollToItem(0)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CattleAdvisorResultCard(&#10;    result: CattleAdvisorResult,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var showFullScreen by remember { mutableStateOf(false) }&#10;    &#10;    if (showFullScreen) {&#10;        FullScreenAnalysisDialog(&#10;            result = result,&#10;            onDismiss = { showFullScreen = false }&#10;        )&#10;    }&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clickable { showFullScreen = true },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            // Header with cattle info&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = result.cattleType,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;Target: ${result.targetWeight} lbs&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;            &#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = &quot;Current: ${result.bodyWeight} lbs&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = &quot;ADG: ${result.averageDailyGain} lbs/day&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            &#10;            HorizontalDivider()&#10;            &#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            &#10;            // Recommendation Header&#10;            Text(&#10;                text = &quot; Nutrition Recommendation&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            &#10;            // Recommendation&#10;            if (result.isLoading) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.size(16.dp),&#10;                        strokeWidth = 2.dp&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&#10;                        text = &quot;Generating nutrition advice...&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                if (result.recommendation.isNotEmpty()) {&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .heightIn(min = 150.dp, max = 400.dp),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 1.dp),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.2f)&#10;                        )&#10;                    ) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxSize()&#10;                                .verticalScroll(rememberScrollState())&#10;                        ) {&#10;                            MarkdownText(&#10;                                text = result.recommendation,&#10;                                modifier = Modifier&#10;                                    .padding(14.dp)&#10;                                    .fillMaxWidth(),&#10;                                smallFontSize = true&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                // Use a Card with better styling for the final result&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .heightIn(min = 200.dp, max = 600.dp), // Allow more height for tables&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 1.dp),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.3f)&#10;                    )&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .verticalScroll(rememberScrollState())&#10;                    ) {&#10;                        MarkdownText(&#10;                            text = result.recommendation,&#10;                            modifier = Modifier&#10;                                .padding(16.dp) // Increased padding for better readability&#10;                                .fillMaxWidth(), // Use fillMaxWidth instead of wrapContentSize&#10;                            smallFontSize = false&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FullScreenAnalysisCard(&#10;    result: CattleAdvisorResult,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    LazyColumn(&#10;        modifier = modifier.fillMaxSize(),&#10;        verticalArrangement = Arrangement.spacedBy(24.dp)&#10;    ) {&#10;        // Header Card with Cattle Information&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.Start,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Icon(&#10;                            Icons.Default.Analytics,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.size(32.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(12.dp))&#10;                        Text(&#10;                            text = result.cattleType,&#10;                            style = MaterialTheme.typography.headlineMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                    }&#10;                    &#10;                    Spacer(modifier = Modifier.height(20.dp))&#10;                    &#10;                    // Cattle Stats in a beautiful grid&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceEvenly&#10;                    ) {&#10;                        CattleStatCard(&#10;                            label = &quot;Current Weight&quot;,&#10;                            value = &quot;${result.bodyWeight} lbs&quot;,&#10;                            color = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                        CattleStatCard(&#10;                            label = &quot;Target Weight&quot;, &#10;                            value = &quot;${result.targetWeight} lbs&quot;,&#10;                            color = MaterialTheme.colorScheme.tertiary&#10;                        )&#10;                        CattleStatCard(&#10;                            label = &quot;Daily Gain&quot;,&#10;                            value = &quot;${result.averageDailyGain} lbs/day&quot;,&#10;                            color = MaterialTheme.colorScheme.error&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        &#10;        // Recommendation Content&#10;        item {&#10;            if (result.isLoading) {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.3f)&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier.size(48.dp),&#10;                            strokeWidth = 4.dp,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&#10;                            text = &quot;Analyzing nutrition requirements...&quot;,&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            fontWeight = FontWeight.Medium,&#10;                            color = MaterialTheme.colorScheme.onSecondaryContainer,&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                        if (result.recommendation.isNotEmpty()) {&#10;                            Spacer(modifier = Modifier.height(24.dp))&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .horizontalScroll(rememberScrollState())&#10;                            ) {&#10;                                MarkdownText(&#10;                                    text = result.recommendation,&#10;                                    modifier = Modifier&#10;                                        .widthIn(min = 300.dp, max = 1000.dp)&#10;                                        .wrapContentWidth(),&#10;                                    smallFontSize = false&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                // Final recommendation in beautiful format&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),&#10;                    shape = RoundedCornerShape(16.dp),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.4f)&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp)&#10;                    ) {&#10;                        // Title with icon&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;&quot;,&#10;                                style = MaterialTheme.typography.headlineLarge&#10;                            )&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;                            Text(&#10;                                text = &quot;Nutrition Recommendations&quot;,&#10;                                style = MaterialTheme.typography.headlineMedium,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.primary&#10;                            )&#10;                        }&#10;                        &#10;                        Spacer(modifier = Modifier.height(20.dp))&#10;                        &#10;                        // Content with better formatting and horizontal scroll for tables&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .horizontalScroll(rememberScrollState())&#10;                        ) {&#10;                            MarkdownText(&#10;                                text = result.recommendation,&#10;                                modifier = Modifier&#10;                                    .widthIn(min = 300.dp, max = 1000.dp) // Increased max width for better table display&#10;                                    .wrapContentWidth(),&#10;                                smallFontSize = false&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun FullScreenAnalysisDialog(&#10;    result: CattleAdvisorResult,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(MaterialTheme.colorScheme.surface)&#10;    ) {&#10;        // Top App Bar&#10;        TopAppBar(&#10;            title = {&#10;                Text(&#10;                    text = &quot;Nutrition Analysis&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            },&#10;            navigationIcon = {&#10;                IconButton(onClick = onDismiss) {&#10;                    Icon(&#10;                        Icons.Default.Close,&#10;                        contentDescription = &quot;Close&quot;,&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;            },&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.surface,&#10;                titleContentColor = MaterialTheme.colorScheme.primary&#10;            )&#10;        )&#10;        &#10;        // Content&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(top = 64.dp), // Account for top bar&#10;            contentPadding = PaddingValues(24.dp),&#10;            verticalArrangement = Arrangement.spacedBy(24.dp)&#10;        ) {&#10;            // Header Card with Cattle Information&#10;            item {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.Start,&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                Icons.Default.Analytics,&#10;                                contentDescription = null,&#10;                                tint = MaterialTheme.colorScheme.primary,&#10;                                modifier = Modifier.size(32.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;                            Text(&#10;                                text = result.cattleType,&#10;                                style = MaterialTheme.typography.headlineMedium,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                        }&#10;                        &#10;                        Spacer(modifier = Modifier.height(20.dp))&#10;                        &#10;                        // Cattle Stats in a beautiful grid&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.SpaceEvenly&#10;                        ) {&#10;                            CattleStatCard(&#10;                                label = &quot;Current Weight&quot;,&#10;                                value = &quot;${result.bodyWeight} lbs&quot;,&#10;                                color = MaterialTheme.colorScheme.secondary&#10;                            )&#10;                            CattleStatCard(&#10;                                label = &quot;Target Weight&quot;, &#10;                                value = &quot;${result.targetWeight} lbs&quot;,&#10;                                color = MaterialTheme.colorScheme.tertiary&#10;                            )&#10;                            CattleStatCard(&#10;                                label = &quot;Daily Gain&quot;,&#10;                                value = &quot;${result.averageDailyGain} lbs/day&quot;,&#10;                                color = MaterialTheme.colorScheme.error&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            &#10;            // Recommendation Content&#10;            item {&#10;                if (result.isLoading) {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.3f)&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(24.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator(&#10;                                modifier = Modifier.size(48.dp),&#10;                                strokeWidth = 4.dp,&#10;                                color = MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;Analyzing nutrition requirements...&quot;,&#10;                                style = MaterialTheme.typography.titleLarge,&#10;                                fontWeight = FontWeight.Medium,&#10;                                color = MaterialTheme.colorScheme.onSecondaryContainer,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            if (result.recommendation.isNotEmpty()) {&#10;                                Spacer(modifier = Modifier.height(24.dp))&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .horizontalScroll(rememberScrollState())&#10;                                ) {&#10;                                    MarkdownText(&#10;                                        text = result.recommendation,&#10;                                        modifier = Modifier&#10;                                            .widthIn(min = 300.dp, max = 800.dp)&#10;                                            .wrapContentWidth(),&#10;                                        smallFontSize = false&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                } else {&#10;                    // Final recommendation in beautiful format&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),&#10;                        shape = RoundedCornerShape(16.dp),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.4f)&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(24.dp)&#10;                        ) {&#10;                            // Title with icon&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                modifier = Modifier.fillMaxWidth()&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;&quot;,&#10;                                    style = MaterialTheme.typography.headlineLarge&#10;                                )&#10;                                Spacer(modifier = Modifier.width(12.dp))&#10;                                Text(&#10;                                    text = &quot;Nutrition Recommendations&quot;,&#10;                                    style = MaterialTheme.typography.headlineMedium,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = MaterialTheme.colorScheme.primary&#10;                                )&#10;                            }&#10;                            &#10;                            Spacer(modifier = Modifier.height(20.dp))&#10;                            &#10;                            // Content with better formatting and horizontal scroll for tables&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .horizontalScroll(rememberScrollState())&#10;                            ) {&#10;                                MarkdownText(&#10;                                    text = result.recommendation,&#10;                                    modifier = Modifier&#10;                                        .widthIn(min = 300.dp, max = 800.dp)&#10;                                        .wrapContentWidth(),&#10;                                    smallFontSize = false&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CattleStatCard(&#10;    label: String,&#10;    value: String,&#10;    color: androidx.compose.ui.graphics.Color&#10;) {&#10;    Card(&#10;        modifier = Modifier.width(110.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = color.copy(alpha = 0.1f)&#10;        ),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = label,&#10;                style = MaterialTheme.typography.labelMedium,&#10;                color = color,&#10;                fontWeight = FontWeight.SemiBold,&#10;                textAlign = TextAlign.Center&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onSurface,&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="/*&#10; * Copyright 2025 Google LLC&#10; *&#10; * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#10; * you may not use this file except in compliance with the License.&#10; * You may obtain a copy of the License at&#10; *&#10; *     http://www.apache.org/licenses/LICENSE-2.0&#10; *&#10; * Unless required by applicable law or agreed to in writing, software&#10; * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10; * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10; * See the License for the specific language governing permissions and&#10; * limitations under the License.&#10; */&#10;&#10;package com.google.ai.edge.gallery.ui.cattleadvisor&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.foundation.horizontalScroll&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Analytics&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Fullscreen&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.google.ai.edge.gallery.GalleryTopAppBar&#10;import com.google.ai.edge.gallery.data.AppBarAction&#10;import com.google.ai.edge.gallery.data.AppBarActionType&#10;import com.google.ai.edge.gallery.ui.modelmanager.ModelManagerViewModel&#10;import com.google.ai.edge.gallery.ui.common.ConfigDialog&#10;import com.google.ai.edge.gallery.ui.common.MarkdownText&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CattleAdvisorScreen(&#10;    viewModel: CattleAdvisorViewModel,&#10;    modelManagerViewModel: ModelManagerViewModel,&#10;    navigateUp: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val context = LocalContext.current&#10;    val analysisResults = viewModel.analysisResults&#10;    val isAnalyzing = viewModel.isAnalyzing&#10;    val errorMessage = viewModel.errorMessage&#10;    val isNutritionServiceInitialized = viewModel.isNutritionServiceInitialized&#10;&#10;    // Initialize nutrition service on first composition&#10;    LaunchedEffect(Unit) {&#10;        viewModel.initializeNutritionService(context)&#10;    }&#10;    &#10;    val listState = rememberLazyListState()&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    // Input states&#10;    var selectedCattleType by remember { mutableStateOf(&quot;&quot;) }&#10;    var targetWeight by remember { mutableStateOf(&quot;&quot;) }&#10;    var bodyWeight by remember { mutableStateOf(&quot;&quot;) }&#10;    var averageDailyGain by remember { mutableStateOf(&quot;&quot;) }&#10;    var expanded by remember { mutableStateOf(false) }&#10;    &#10;    // Cattle types from Python code&#10;    val cattleTypes = listOf(&#10;        &quot;Growing Steer/Heifer&quot;,&#10;        &quot;Growing Yearlings&quot;,&#10;        &quot;Growing Mature Bulls&quot;&#10;    )&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            GalleryTopAppBar(&#10;                title = &quot;Cattle Advisor&quot;,&#10;                leftAction = AppBarAction(&#10;                    actionType = AppBarActionType.NAVIGATE_UP,&#10;                    actionFn = navigateUp&#10;                )&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            // Show input form only when no analysis results&#10;            if (analysisResults.isEmpty()) {&#10;                // Input form&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;                ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Cattle Information&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Cattle Type Dropdown&#10;                    ExposedDropdownMenuBox(&#10;                        expanded = expanded,&#10;                        onExpandedChange = { expanded = !expanded }&#10;                    ) {&#10;                        OutlinedTextField(&#10;                            modifier = Modifier&#10;                                .menuAnchor(MenuAnchorType.PrimaryNotEditable)&#10;                                .fillMaxWidth(),&#10;                            readOnly = true,&#10;                            value = selectedCattleType,&#10;                            onValueChange = {},&#10;                            label = { Text(&quot;Cattle Type&quot;) },&#10;                            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },&#10;                            colors = ExposedDropdownMenuDefaults.outlinedTextFieldColors(),&#10;                        )&#10;                        ExposedDropdownMenu(&#10;                            expanded = expanded,&#10;                            onDismissRequest = { expanded = false },&#10;                        ) {&#10;                            cattleTypes.forEach { type -&gt;&#10;                                DropdownMenuItem(&#10;                                    text = { Text(type) },&#10;                                    onClick = {&#10;                                        selectedCattleType = type&#10;                                        expanded = false&#10;                                    },&#10;                                    contentPadding = ExposedDropdownMenuDefaults.ItemContentPadding,&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    // Target Weight&#10;                    OutlinedTextField(&#10;                        value = targetWeight,&#10;                        onValueChange = { targetWeight = it },&#10;                        label = { Text(&quot;Target Weight (lbs)&quot;) },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal),&#10;                        singleLine = true&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    // Current Body Weight&#10;                    OutlinedTextField(&#10;                        value = bodyWeight,&#10;                        onValueChange = { bodyWeight = it },&#10;                        label = { Text(&quot;Current Body Weight (lbs)&quot;) },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal),&#10;                        singleLine = true&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    // Average Daily Gain&#10;                    OutlinedTextField(&#10;                        value = averageDailyGain,&#10;                        onValueChange = { averageDailyGain = it },&#10;                        label = { Text(&quot;Average Daily Gain (lbs/day)&quot;) },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal),&#10;                        singleLine = true&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Analyze button - no model selection needed&#10;                    Button(&#10;                        onClick = {&#10;                            viewModel.clearError()&#10;                            val targetWeightValue = targetWeight.toDoubleOrNull() ?: 0.0&#10;                            val bodyWeightValue = bodyWeight.toDoubleOrNull() ?: 0.0&#10;                            val adgValue = averageDailyGain.toDoubleOrNull() ?: 0.0&#10;&#10;                            // Direct analysis without model selection&#10;                            viewModel.analyzeNutrition(&#10;                                context = context,&#10;                                cattleType = selectedCattleType,&#10;                                targetWeight = targetWeightValue,&#10;                                bodyWeight = bodyWeightValue,&#10;                                averageDailyGain = adgValue,&#10;                                modelManagerViewModel = modelManagerViewModel&#10;                            )&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        enabled = !isAnalyzing &amp;&amp; isNutritionServiceInitialized&#10;                    ) {&#10;                        if (isAnalyzing) {&#10;                            CircularProgressIndicator(&#10;                                modifier = Modifier.size(16.dp),&#10;                                strokeWidth = 2.dp&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&quot;Analyzing...&quot;)&#10;                        } else {&#10;                            Icon(&#10;                                Icons.Default.Analytics,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(18.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&quot;Analyze Nutrition&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            }&#10;&#10;            // Error message&#10;            errorMessage?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.errorContainer)&#10;                ) {&#10;                    Text(&#10;                        text = error,&#10;                        modifier = Modifier.padding(12.dp),&#10;                        color = MaterialTheme.colorScheme.onErrorContainer&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Show results in full screen when available&#10;            if (analysisResults.isNotEmpty()) {&#10;                // New Analysis button when results exist&#10;                Button(&#10;                    onClick = {&#10;                        viewModel.clearResults() // Add this method to clear results and show form again&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.Analytics,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(18.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;New Analysis&quot;)&#10;                }&#10;                &#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                &#10;                // Show latest result in full screen mode&#10;                analysisResults.lastOrNull()?.let { latestResult -&gt;&#10;                    FullScreenAnalysisCard(result = latestResult)&#10;                }&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Auto-scroll to latest result&#10;    LaunchedEffect(analysisResults.size) {&#10;        if (analysisResults.isNotEmpty()) {&#10;            coroutineScope.launch {&#10;                listState.animateScrollToItem(0)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CattleAdvisorResultCard(&#10;    result: CattleAdvisorResult,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var showFullScreen by remember { mutableStateOf(false) }&#10;    &#10;    if (showFullScreen) {&#10;        FullScreenAnalysisDialog(&#10;            result = result,&#10;            onDismiss = { showFullScreen = false }&#10;        )&#10;    }&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clickable { showFullScreen = true },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            // Header with cattle info&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = result.cattleType,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                Text(&#10;                    text = &quot;Target: ${result.targetWeight} lbs&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;            &#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = &quot;Current: ${result.bodyWeight} lbs&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Text(&#10;                    text = &quot;ADG: ${result.averageDailyGain} lbs/day&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            &#10;            HorizontalDivider()&#10;            &#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            &#10;            // Recommendation Header&#10;            Text(&#10;                text = &quot; Nutrition Recommendation&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Recommendation&#10;            if (result.isLoading) {&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.size(16.dp),&#10;                        strokeWidth = 2.dp&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&#10;                        text = &quot;Generating nutrition advice...&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                if (result.recommendation.isNotEmpty()) {&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .heightIn(min = 150.dp, max = 400.dp),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 1.dp),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.2f)&#10;                        )&#10;                    ) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxSize()&#10;                                .verticalScroll(rememberScrollState())&#10;                        ) {&#10;                            MarkdownText(&#10;                                text = result.recommendation,&#10;                                modifier = Modifier&#10;                                    .padding(14.dp)&#10;                                    .fillMaxWidth(),&#10;                                smallFontSize = true&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                // Use a Card with better styling for the final result&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .heightIn(min = 200.dp, max = 600.dp), // Allow more height for tables&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 1.dp),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.3f)&#10;                    )&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .verticalScroll(rememberScrollState())&#10;                    ) {&#10;                        MarkdownText(&#10;                            text = result.recommendation,&#10;                            modifier = Modifier&#10;                                .padding(16.dp) // Increased padding for better readability&#10;                                .fillMaxWidth(), // Use fillMaxWidth instead of wrapContentSize&#10;                            smallFontSize = false&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FullScreenAnalysisCard(&#10;    result: CattleAdvisorResult,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    LazyColumn(&#10;        modifier = modifier.fillMaxSize(),&#10;        verticalArrangement = Arrangement.spacedBy(24.dp)&#10;    ) {&#10;        // Header Card with Cattle Information&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.Start,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Icon(&#10;                            Icons.Default.Analytics,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.size(32.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(12.dp))&#10;                        Text(&#10;                            text = result.cattleType,&#10;                            style = MaterialTheme.typography.headlineMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(20.dp))&#10;&#10;                    // Cattle Stats in a beautiful grid&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceEvenly&#10;                    ) {&#10;                        CattleStatCard(&#10;                            label = &quot;Current Weight&quot;,&#10;                            value = &quot;${result.bodyWeight} lbs&quot;,&#10;                            color = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                        CattleStatCard(&#10;                            label = &quot;Target Weight&quot;,&#10;                            value = &quot;${result.targetWeight} lbs&quot;,&#10;                            color = MaterialTheme.colorScheme.tertiary&#10;                        )&#10;                        CattleStatCard(&#10;                            label = &quot;Daily Gain&quot;,&#10;                            value = &quot;${result.averageDailyGain} lbs/day&quot;,&#10;                            color = MaterialTheme.colorScheme.error&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Recommendation Content&#10;        item {&#10;            if (result.isLoading) {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.3f)&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier.size(48.dp),&#10;                            strokeWidth = 4.dp,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&#10;                            text = &quot;Analyzing nutrition requirements...&quot;,&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            fontWeight = FontWeight.Medium,&#10;                            color = MaterialTheme.colorScheme.onSecondaryContainer,&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                        if (result.recommendation.isNotEmpty()) {&#10;                            Spacer(modifier = Modifier.height(24.dp))&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .horizontalScroll(rememberScrollState())&#10;                            ) {&#10;                                MarkdownText(&#10;                                    text = result.recommendation,&#10;                                    modifier = Modifier&#10;                                        .widthIn(min = 300.dp, max = 1000.dp)&#10;                                        .wrapContentWidth(),&#10;                                    smallFontSize = false&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                // Final recommendation in beautiful format&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),&#10;                    shape = RoundedCornerShape(16.dp),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.4f)&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp)&#10;                    ) {&#10;                        // Title with icon&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;&quot;,&#10;                                style = MaterialTheme.typography.headlineLarge&#10;                            )&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;                            Text(&#10;                                text = &quot;Nutrition Recommendations&quot;,&#10;                                style = MaterialTheme.typography.headlineMedium,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.primary&#10;                            )&#10;                        }&#10;&#10;                        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;                        // Content with better formatting and horizontal scroll for tables&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .horizontalScroll(rememberScrollState())&#10;                        ) {&#10;                            MarkdownText(&#10;                                text = result.recommendation,&#10;                                modifier = Modifier&#10;                                    .widthIn(min = 300.dp, max = 1000.dp) // Increased max width for better table display&#10;                                    .wrapContentWidth(),&#10;                                smallFontSize = false&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun FullScreenAnalysisDialog(&#10;    result: CattleAdvisorResult,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(MaterialTheme.colorScheme.surface)&#10;    ) {&#10;        // Top App Bar&#10;        TopAppBar(&#10;            title = {&#10;                Text(&#10;                    text = &quot;Nutrition Analysis&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            },&#10;            navigationIcon = {&#10;                IconButton(onClick = onDismiss) {&#10;                    Icon(&#10;                        Icons.Default.Close,&#10;                        contentDescription = &quot;Close&quot;,&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;            },&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.surface,&#10;                titleContentColor = MaterialTheme.colorScheme.primary&#10;            )&#10;        )&#10;&#10;        // Content&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(top = 64.dp), // Account for top bar&#10;            contentPadding = PaddingValues(24.dp),&#10;            verticalArrangement = Arrangement.spacedBy(24.dp)&#10;        ) {&#10;            // Header Card with Cattle Information&#10;            item {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(24.dp)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.Start,&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Icon(&#10;                                Icons.Default.Analytics,&#10;                                contentDescription = null,&#10;                                tint = MaterialTheme.colorScheme.primary,&#10;                                modifier = Modifier.size(32.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;                            Text(&#10;                                text = result.cattleType,&#10;                                style = MaterialTheme.typography.headlineMedium,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                        }&#10;&#10;                        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;                        // Cattle Stats in a beautiful grid&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.SpaceEvenly&#10;                        ) {&#10;                            CattleStatCard(&#10;                                label = &quot;Current Weight&quot;,&#10;                                value = &quot;${result.bodyWeight} lbs&quot;,&#10;                                color = MaterialTheme.colorScheme.secondary&#10;                            )&#10;                            CattleStatCard(&#10;                                label = &quot;Target Weight&quot;,&#10;                                value = &quot;${result.targetWeight} lbs&quot;,&#10;                                color = MaterialTheme.colorScheme.tertiary&#10;                            )&#10;                            CattleStatCard(&#10;                                label = &quot;Daily Gain&quot;,&#10;                                value = &quot;${result.averageDailyGain} lbs/day&quot;,&#10;                                color = MaterialTheme.colorScheme.error&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Recommendation Content&#10;            item {&#10;                if (result.isLoading) {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.3f)&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(24.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator(&#10;                                modifier = Modifier.size(48.dp),&#10;                                strokeWidth = 4.dp,&#10;                                color = MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;Analyzing nutrition requirements...&quot;,&#10;                                style = MaterialTheme.typography.titleLarge,&#10;                                fontWeight = FontWeight.Medium,&#10;                                color = MaterialTheme.colorScheme.onSecondaryContainer,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            if (result.recommendation.isNotEmpty()) {&#10;                                Spacer(modifier = Modifier.height(24.dp))&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .horizontalScroll(rememberScrollState())&#10;                                ) {&#10;                                    MarkdownText(&#10;                                        text = result.recommendation,&#10;                                        modifier = Modifier&#10;                                            .widthIn(min = 300.dp, max = 800.dp)&#10;                                            .wrapContentWidth(),&#10;                                        smallFontSize = false&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                } else {&#10;                    // Final recommendation in beautiful format&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),&#10;                        shape = RoundedCornerShape(16.dp),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.4f)&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(24.dp)&#10;                        ) {&#10;                            // Title with icon&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                modifier = Modifier.fillMaxWidth()&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;&quot;,&#10;                                    style = MaterialTheme.typography.headlineLarge&#10;                                )&#10;                                Spacer(modifier = Modifier.width(12.dp))&#10;                                Text(&#10;                                    text = &quot;Nutrition Recommendations&quot;,&#10;                                    style = MaterialTheme.typography.headlineMedium,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = MaterialTheme.colorScheme.primary&#10;                                )&#10;                            }&#10;&#10;                            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;                            // Content with better formatting and horizontal scroll for tables&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .horizontalScroll(rememberScrollState())&#10;                            ) {&#10;                                MarkdownText(&#10;                                    text = result.recommendation,&#10;                                    modifier = Modifier&#10;                                        .widthIn(min = 300.dp, max = 800.dp)&#10;                                        .wrapContentWidth(),&#10;                                    smallFontSize = false&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CattleStatCard(&#10;    label: String,&#10;    value: String,&#10;    color: androidx.compose.ui.graphics.Color&#10;) {&#10;    Card(&#10;        modifier = Modifier.width(110.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = color.copy(alpha = 0.1f)&#10;        ),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = label,&#10;                style = MaterialTheme.typography.labelMedium,&#10;                color = color,&#10;                fontWeight = FontWeight.SemiBold,&#10;                textAlign = TextAlign.Center&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = value,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onSurface,&#10;                textAlign = TextAlign.Center&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>